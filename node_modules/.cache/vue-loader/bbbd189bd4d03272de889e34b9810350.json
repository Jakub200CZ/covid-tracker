{"remainingRequest":"/Users/jakub/Desktop/Dev/covid-tracker/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/jakub/Desktop/Dev/covid-tracker/src/views/Home.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/jakub/Desktop/Dev/covid-tracker/src/views/Home.vue","mtime":1633891267168},{"path":"/Users/jakub/Desktop/Dev/covid-tracker/node_modules/babel-loader/lib/index.js","mtime":1633879594566},{"path":"/Users/jakub/Desktop/Dev/covid-tracker/node_modules/cache-loader/dist/cjs.js","mtime":1633879594556},{"path":"/Users/jakub/Desktop/Dev/covid-tracker/node_modules/vue-loader-v16/dist/index.js","mtime":1633879604047}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBEYXRhVGl0bGUgZnJvbSAnQC9jb21wb25lbnRzL0RhdGFUaXRsZScKaW1wb3J0IERhdGFCb3hlcyBmcm9tICdAL2NvbXBvbmVudHMvRGF0YUJveGVzJwppbXBvcnQgQ291bnRyeVNlbGVjdCBmcm9tICdAL2NvbXBvbmVudHMvQ291bnRyeVNlbGVjdCcKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnSG9tZScsCiAgY29tcG9uZW50czogewogICAgRGF0YVRpdGxlLAogICAgRGF0YUJveGVzLAogICAgQ291bnRyeVNlbGVjdAogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGxvYWRpbmc6IHRydWUsCiAgICAgIHRpdGxlOiAnR2xvYmFsJywKICAgICAgZGF0YURhdGU6ICcnLAogICAgICBzdGF0dXM6IHt9LAogICAgICBjb3VudHJpZXM6IFtdLAogICAgICBsb2FkaW5nSW1hZ2U6IHJlcXVpcmUoJy4uL2Fzc2V0cy9sb2FkaW5nLmdpZicpLAogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgYXN5bmMgZmV0Y2hDb3ZpZERhdGEoKSB7CiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCdodHRwczovL2FwaS5jb3ZpZDE5YXBpLmNvbS9zdW1tYXJ5JykKICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCkKCiAgICAgIHJldHVybiBkYXRhCiAgICB9LAogICAgZ2V0Q291bnRyeURhdGEoY291bnRyeSkgewogICAgICB0aGlzLnN0YXRzID0gY291bnRyeQogICAgICB0aGlzLnRpdGxlID0gY291bnRyeS5Db3VudHJ5CiAgICB9LAogICAgYXN5bmMgY2xlYXJDb3VudHJ5RGF0YSgpIHsKICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZQogICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5mZXRjaENvdmlkRGF0YSgpCiAgICAgIHRoaXMudGl0bGUgPSAnR2xvYmFsJwogICAgICB0aGlzLnN0YXRzID0gZGF0YS5HbG9iYWwKICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2UKICAgIH0KICB9LAogIGFzeW5jIGNyZWF0ZWQoKSB7CiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5mZXRjaENvdmlkRGF0YSgpCgogICAgdGhpcy5kYXRhRGF0ZSA9IGRhdGEuRGF0ZQogICAgdGhpcy5zdGF0cyA9IGRhdGEuR2xvYmFsCiAgICB0aGlzLmNvdW50cmllcyA9IGRhdGEuQ291bnRyaWVzCiAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZQogIH0KfQo="},{"version":3,"sources":["/Users/jakub/Desktop/Dev/covid-tracker/src/views/Home.vue"],"names":[],"mappings":"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","file":"/Users/jakub/Desktop/Dev/covid-tracker/src/views/Home.vue","sourceRoot":"","sourcesContent":["<template>\n  <main v-if=\"!loading\">\n    <DataTitle :text=\"title\" :dataDate=\"dataDate\"/>\n\n    <CountrySelect @get-country=\"getCountryData\" :countries=\"countries\" />\n\n    <DataBoxes :stats=\"stats\" />\n\n    <button @click=\"clearCountryData\" v-if=\"stats.Country\" class=\"rounded-lg bg-indigo-600 text-white px-4 py-3 font-semibold text-lg leading-tight shadow-md hover:bg-indigo-700 transition duration-150 mt-3 align-center\"> Clear Country </button>\n  </main>\n\n  <main class=\"flex flex-col align-center justify-center text-center\" v-else>\n    <div class=\"text-gray-500 text-3xl mt-10 mb-6\">\n      Fetching Data\n    </div>\n    <img :src=\"loadingImage\" alt=\"\" class=\"w-24 m-auto\" />\n  </main>\n\n</template>\n\n<script>\nimport DataTitle from '@/components/DataTitle'\nimport DataBoxes from '@/components/DataBoxes'\nimport CountrySelect from '@/components/CountrySelect'\n\nexport default {\n  name: 'Home',\n  components: {\n    DataTitle,\n    DataBoxes,\n    CountrySelect\n  },\n  data() {\n    return {\n      loading: true,\n      title: 'Global',\n      dataDate: '',\n      status: {},\n      countries: [],\n      loadingImage: require('../assets/loading.gif'),\n    }\n  },\n  methods: {\n    async fetchCovidData() {\n      const res = await fetch('https://api.covid19api.com/summary')\n      const data = await res.json()\n\n      return data\n    },\n    getCountryData(country) {\n      this.stats = country\n      this.title = country.Country\n    },\n    async clearCountryData() {\n      this.loading = true\n      const data = await this.fetchCovidData()\n      this.title = 'Global'\n      this.stats = data.Global\n      this.loading = false\n    }\n  },\n  async created() {\n    const data = await this.fetchCovidData()\n\n    this.dataDate = data.Date\n    this.stats = data.Global\n    this.countries = data.Countries\n    this.loading = false\n  }\n}\n</script>\n"]}]}